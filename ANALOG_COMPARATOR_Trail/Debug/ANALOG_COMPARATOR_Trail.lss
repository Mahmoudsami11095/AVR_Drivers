
ANALOG_COMPARATOR_Trail.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000226  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000226  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006fc  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bbb  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  7a:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ANALOG_COMARTOR_init>:
 */

#include "ANALOG_COMPARATOR.H"

void ANALOG_COMARTOR_init (const AnalogCompartorConfiguration * ACConfiguration)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <ANALOG_COMARTOR_init+0x6>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	9a 83       	std	Y+2, r25	; 0x02
  8e:	89 83       	std	Y+1, r24	; 0x01
	SFIOR |= (ACConfiguration->ACMultiplexerMode <<ACME);
  90:	a0 e5       	ldi	r26, 0x50	; 80
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e0 e5       	ldi	r30, 0x50	; 80
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	28 2f       	mov	r18, r24
  9c:	e9 81       	ldd	r30, Y+1	; 0x01
  9e:	fa 81       	ldd	r31, Y+2	; 0x02
  a0:	80 81       	ld	r24, Z
  a2:	88 2f       	mov	r24, r24
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	82 2b       	or	r24, r18
  b4:	8c 93       	st	X, r24

	ACSR |=   (ACConfiguration->ACBandgapMode <<ACBG)
  b6:	a8 e2       	ldi	r26, 0x28	; 40
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e8 e2       	ldi	r30, 0x28	; 40
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	38 2f       	mov	r19, r24
  c2:	e9 81       	ldd	r30, Y+1	; 0x01
  c4:	fa 81       	ldd	r31, Y+2	; 0x02
  c6:	81 81       	ldd	r24, Z+1	; 0x01
  c8:	88 2f       	mov	r24, r24
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	00 24       	eor	r0, r0
  ce:	96 95       	lsr	r25
  d0:	87 95       	ror	r24
  d2:	07 94       	ror	r0
  d4:	96 95       	lsr	r25
  d6:	87 95       	ror	r24
  d8:	07 94       	ror	r0
  da:	98 2f       	mov	r25, r24
  dc:	80 2d       	mov	r24, r0
  de:	28 2f       	mov	r18, r24
  e0:	e9 81       	ldd	r30, Y+1	; 0x01
  e2:	fa 81       	ldd	r31, Y+2	; 0x02
  e4:	83 81       	ldd	r24, Z+3	; 0x03
  e6:	88 2f       	mov	r24, r24
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	92 2f       	mov	r25, r18
  f8:	98 2b       	or	r25, r24
  fa:	e9 81       	ldd	r30, Y+1	; 0x01
  fc:	fa 81       	ldd	r31, Y+2	; 0x02
  fe:	84 81       	ldd	r24, Z+4	; 0x04
 100:	29 2f       	mov	r18, r25
 102:	28 2b       	or	r18, r24
 104:	e9 81       	ldd	r30, Y+1	; 0x01
 106:	fa 81       	ldd	r31, Y+2	; 0x02
 108:	85 81       	ldd	r24, Z+5	; 0x05
 10a:	88 2f       	mov	r24, r24
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	82 2b       	or	r24, r18
 118:	83 2b       	or	r24, r19
 11a:	8c 93       	st	X, r24
		    | (ACConfiguration->ACInterruptMode <<ACIE)
			| (ACConfiguration->ACInterruptType <<ACIS0)
			| (ACConfiguration->ACInputCaptureMode <<ACIC);

	ADMUX &= 0xF8;
 11c:	a7 e2       	ldi	r26, 0x27	; 39
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	e7 e2       	ldi	r30, 0x27	; 39
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 7f       	andi	r24, 0xF8	; 248
 128:	8c 93       	st	X, r24
	ADMUX |= (ACConfiguration->ACNegativeInputMode <<MUX0);
 12a:	a7 e2       	ldi	r26, 0x27	; 39
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	e7 e2       	ldi	r30, 0x27	; 39
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	90 81       	ld	r25, Z
 134:	e9 81       	ldd	r30, Y+1	; 0x01
 136:	fa 81       	ldd	r31, Y+2	; 0x02
 138:	82 81       	ldd	r24, Z+2	; 0x02
 13a:	89 2b       	or	r24, r25
 13c:	8c 93       	st	X, r24
}
 13e:	0f 90       	pop	r0
 140:	0f 90       	pop	r0
 142:	cf 91       	pop	r28
 144:	df 91       	pop	r29
 146:	08 95       	ret

00000148 <ANALOG_COMARTOR_Start>:

void ANALOG_COMARTOR_Start ()
{
 148:	df 93       	push	r29
 14a:	cf 93       	push	r28
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ACSR,ACD);
 150:	a8 e2       	ldi	r26, 0x28	; 40
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	e8 e2       	ldi	r30, 0x28	; 40
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	8f 77       	andi	r24, 0x7F	; 127
 15c:	8c 93       	st	X, r24
	ACSR |= (AC_ENABLE<<ACD);
 15e:	a8 e2       	ldi	r26, 0x28	; 40
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e8 e2       	ldi	r30, 0x28	; 40
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	8c 93       	st	X, r24
}
 16a:	cf 91       	pop	r28
 16c:	df 91       	pop	r29
 16e:	08 95       	ret

00000170 <ANALOG_COMARTOR_Output>:

uint8 ANALOG_COMARTOR_Output ()
{
 170:	df 93       	push	r29
 172:	cf 93       	push	r28
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
	return ((ACSR >> ACO) & (0x01));
 178:	e8 e2       	ldi	r30, 0x28	; 40
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	82 95       	swap	r24
 180:	86 95       	lsr	r24
 182:	87 70       	andi	r24, 0x07	; 7
 184:	81 70       	andi	r24, 0x01	; 1
}
 186:	cf 91       	pop	r28
 188:	df 91       	pop	r29
 18a:	08 95       	ret

0000018c <ANALOG_COMARTOR_Stop>:

void ANALOG_COMARTOR_Stop ()
{
 18c:	df 93       	push	r29
 18e:	cf 93       	push	r28
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
	ACSR |= (AC_DISABLE<<ACD);
 194:	a8 e2       	ldi	r26, 0x28	; 40
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	e8 e2       	ldi	r30, 0x28	; 40
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	8c 93       	st	X, r24

}
 1a2:	cf 91       	pop	r28
 1a4:	df 91       	pop	r29
 1a6:	08 95       	ret

000001a8 <main>:

#include "ANALOG_COMPARATOR.H"


int main (void)
{
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	df 93       	push	r29
 1ae:	cf 93       	push	r28
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	2b 97       	sbiw	r28, 0x0b	; 11
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF;
 1c0:	e4 e3       	ldi	r30, 0x34	; 52
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	80 83       	st	Z, r24

	AnalogCompartorConfiguration ACConfig ={ACM_ENABLE,AC_BG_DISABLE,ADC3,AC_INT_DISABLE,AC_INT_TOGGLE,AC_IC_DISABLE};
 1c8:	ce 01       	movw	r24, r28
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	98 87       	std	Y+8, r25	; 0x08
 1ce:	8f 83       	std	Y+7, r24	; 0x07
 1d0:	e0 e6       	ldi	r30, 0x60	; 96
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	fa 87       	std	Y+10, r31	; 0x0a
 1d6:	e9 87       	std	Y+9, r30	; 0x09
 1d8:	f6 e0       	ldi	r31, 0x06	; 6
 1da:	fb 87       	std	Y+11, r31	; 0x0b
 1dc:	e9 85       	ldd	r30, Y+9	; 0x09
 1de:	fa 85       	ldd	r31, Y+10	; 0x0a
 1e0:	00 80       	ld	r0, Z
 1e2:	89 85       	ldd	r24, Y+9	; 0x09
 1e4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	9a 87       	std	Y+10, r25	; 0x0a
 1ea:	89 87       	std	Y+9, r24	; 0x09
 1ec:	ef 81       	ldd	r30, Y+7	; 0x07
 1ee:	f8 85       	ldd	r31, Y+8	; 0x08
 1f0:	00 82       	st	Z, r0
 1f2:	8f 81       	ldd	r24, Y+7	; 0x07
 1f4:	98 85       	ldd	r25, Y+8	; 0x08
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	98 87       	std	Y+8, r25	; 0x08
 1fa:	8f 83       	std	Y+7, r24	; 0x07
 1fc:	9b 85       	ldd	r25, Y+11	; 0x0b
 1fe:	91 50       	subi	r25, 0x01	; 1
 200:	9b 87       	std	Y+11, r25	; 0x0b
 202:	eb 85       	ldd	r30, Y+11	; 0x0b
 204:	ee 23       	and	r30, r30
 206:	51 f7       	brne	.-44     	; 0x1dc <main+0x34>

	ANALOG_COMARTOR_init(&ACConfig);
 208:	ce 01       	movw	r24, r28
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	0e 94 41 00 	call	0x82	; 0x82 <ANALOG_COMARTOR_init>

	ANALOG_COMARTOR_Start();
 210:	0e 94 a4 00 	call	0x148	; 0x148 <ANALOG_COMARTOR_Start>

	while(1)
	{
		PORTC = ANALOG_COMARTOR_Output();
 214:	05 e3       	ldi	r16, 0x35	; 53
 216:	10 e0       	ldi	r17, 0x00	; 0
 218:	0e 94 b8 00 	call	0x170	; 0x170 <ANALOG_COMARTOR_Output>
 21c:	f8 01       	movw	r30, r16
 21e:	80 83       	st	Z, r24
 220:	f9 cf       	rjmp	.-14     	; 0x214 <main+0x6c>

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
